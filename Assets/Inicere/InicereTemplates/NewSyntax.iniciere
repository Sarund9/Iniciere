

Compilation:
<#iniciere "TemplateLocationTest"
1two3
#/> //This is 45 Characters starting at 18

<#iniciere "CSharp Class"

	language "C##"
	category "standart"
	flags "std"
	fileext "cs" //File extension eg: "c, h, cpp" / "js, json"

	// This is a Comment
	
	// in keyword is an Input
	// Followed by Type, followed by Name beginning with '$'
	in string $filename
	
	// Macros can add special meta-data to Inputs
	#
	in string $namespace
	
	// This starts a new File, everything after this is in that file
	file $filename .. ".cs"
	
		// Macros are added to a MacroQueue
		// After the next add command, macros run on its string
		// They may modify the string,
		//	or may invalidate the template
		//#VERIFYCSNAMESPACE()
		add @"
		using System;
		using System.Collections;
		using System.Collections.Generic;
		"
		
		// Macros can dynamically change text
		#INSERT("#filename", $filename)
		add @"class $filename
		{
			
		}
		"



#/>


String Formating

"" basic string
@"" raw string, does not stop when ending a Line. no commands
%"" raw line, does not automatically add a new line at the end
$|"" change the Command Char to '|' default is #

Joining strings:

2 dots joins strings normally
"A String A" .. " Is very good" // -> "A String A Is very good"

3 dots adds a space
"Hello" ... "World" //-> "Hello World"

4 creates a new line
"What a guy" .... "Language"
//->
"What a guy"
"Language"

Commands:
## = write the command character
#n = new line (\n)
#" = the char '"'

Macros:


COMPILER:
* Strip Comments	DONE
* find start

<#iniciere "Test Template"
	
	fileext "txt"
	//language "Text"
	//category "Debug"
	//flags "Test"

	//file "description.txt"
	//	add "Hello Iniciere"
	//	add "This is a Template"
	//	add "Test file"

	in string $filename

	file "HelloWorld.cs"
		add "
using UnityEngine;

class HelloWorldEx
{
#tvoid Main()
#t{
#t#tDebug.Log(#"HelloWorld#");
#t}
}
"
#/>

<#iniciere "Property Test"
	
	fileext "cs, json"
	language "C##, json"
	category "CatA, CatB"
	flags "Web, Dynamic"

	using "System"

	in string $filename
	in Type $parent

	file "MyFile.cs"
		add "
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
"
		add "
class MyFile : MyParent
{
#t
}
"


#/>

<#iniciere "CSharp Class"


in string $filename

#FORMAT($filename)
file "{}.cs"

#FORMAT($filename)
add "
class {}
{
#t
}
"

#/>

<#iniciere "Params"

in string $filename
in string $typename



#/>

TODO
* Get Test Working			|||||
* Property System		|||||
* USING STATEMENTS		|||||

* Macro System
* Keywords accept variables (TryHandleVariable)
* String Joins
* VERIFY USING STATEMENTS
* PROHIBY ALL LINES NOT KEYWORD

STRING HANDLER:
* End string on EndLine |X|
* Raw String (@"")  ||||||
* String Commands (#n, #t, #")	||||
* String Variables
* Join strings (.., ..., ....)

===============
GUI TODO:
* TemplateInfo hold path to file + section rather than full Contesnts	|||
* Get Files Asyncronously	||||
* Move all Compiler Errors to a Custom Log
GUI ELEMENTS:
* Display a List for templates + Template selection
* Display selected template's Info (Name, Lang)
* Filter templates from list by factors (Lagns, Tags, Category, FileEx, Search Bar)
* Template Inspector (Properties) w/ Serialized Property Drawers
* Custom Inspectors
* Create Template & Cancel Button