
<#iniciere "Empty CSharp Class"

	sdesc "Standart CSharp class"
	ldesc "Standart CSharp class with no code"

	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"

	[FileName]
	var $filename
	[Toggle("Add using UnityEngine Statement")]
	var $unitynamespace

	[Toggle("Add Empty Constructor")]
	var $constructor
	
	#FORMAT($filename)
	file "{}.cs"

	add "
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;"

	//TODO: IF, VERIFYNAMESPACE
	#IF($unitynamespace)
	add "using UnityEngine;#n"
	
	//TODO: ENCAPSULATESCOPE (adds tabs before every '\n')
	//TODO: if statements (if, else, endif, elif, keywords) these act like the C# precompiler

	//#TABIF() //TODO: Fix IsAt() StringBuilder Extension Function
	
	#FORMAT($filename)
	add "
public class {}
{#n#t"

#FORMAT($filename)
#IF($constructor)
#TABIF($constructor)
add "#tpublic {}()#n{#n#t#n}#n"
	
add "}"

#/>

<!#iniciere "Inherited CSharp Class"

	sdesc "CSharp class implementing another class"
	ldesc "Select the "

	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"

	[FileName]
	var $filename
	[ClassType("Inherit From")]
	var $baseType

	#FORMAT($filename)
	file "{}.cs"



#/>

<#iniciere "Unity MonoBehaviour"

	sdesc "Unity MonoBehaviour Class"
	ldesc "Unity MonoBehaviour Class, most similar to default script creation"
	
	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"
	
	[FileName]
	var $filename
	
	[Toggle("Add Awake Method")]
	var $mtdAwake
	[Toggle("Add Start Method")]
	var $mtdStart
	[Toggle("Add Update Method")]
	var $mtdUpdate
	[Toggle("Add FixedUpdate Method")]
	var $mtdFixedUpdate
	
	#FORMAT($filename)
	file "{}.cs"
	
	add "
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;#n"
	
	#FORMAT($filename)
	add "
public class {} : MonoBehaviour
{
#t"

#IF($mtdAwake)
add "
#tvoid Awake()#n#t{#n#t#t#n#t}"

#IF($mtdStart)
add "
#tvoid Start()#n#t{#n#t#t#n#t}"

#IF($mtdUpdate)
add "
#tvoid Update()#n#t{#n#t#t#n#t}"

#IF($mtdFixedUpdate)
add "
#tvoid FixedUpdate()#n#t{#n#t#t#n#t}"

add "}"
	
#/>

<#iniciere "Unity ScriptableObject"

	sdesc "Unity ScriptableObject Class"
	ldesc "Unity ScriptableObject Class, used to create class assets"
	
	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"
	
	[FileName]
	var $filename
	
	[Toggle("Add OnEnable Method")]
	var $mtdOnEnable
	[Toggle("Add OnDisable Method")]
	var $mtdOnDisable
	
	[Toggle("Add CreateAssetMenu")]
	var $createAssetMenu
	
	#FORMAT($filename)
	file "{}.cs"
	
	add "
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;#n"
	
	#IF($createAssetMenu)
	add "[CreateAssetMenu]"
	
	#FORMAT($filename)
	add "class {} : ScriptableObject
{
#t"

#IF($mtdOnEnable)
add "#tvoid OnEnable()#n#t{#n#t#t#n#t}#n"

#IF($mtdOnDisable)
add "#tvoid OnDisable()#n#t{#n#t#t#n#t}#n"

add "}"
	
#/>

TODO:
* ClassType Editor Window

* GlobalReflectionsCache on EditorRecompilation

Language:
* typeof expression (Utilizing using Statements)
* Value Assignment: set value of properties using '=' anytime
* Property Access (access C# Properties from Variables)
* Method Calls
* If, Else, ElIf, EndIf, system
* C# Function Calls (Expose through C# Attributes)

Templates:
* MonoBehaviour	|||
* ScriptableObject: Create Asset Alongside it
* EditorWindow Script
* EditorScript (Requires typeofExpression)

Decorators:
* ClassType(Type requiredParent = null)

Macro:
* Convert Tabs Macro



