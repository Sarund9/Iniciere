0
<#iniciere "Empty CSharp Class"

	sdesc "Standart CSharp class"
	
	ldesc "Standart CSharp class with no code"

	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"

	@FileName 
	var filename
	@Toggle("Add using UnityEngine Statement") 
	var unitynamespace

	@Toggle("Add Empty Constructor") 
	var constructor
	
	\=/
	
	@FORMAT(filename)
	file "{}.cs"

	add '''using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
'''

	# TODO: IF, VERIFYNAMESPACE
	@IF(unitynamespace)
	addln "using UnityEngine;"
	
	add "#n"
	
	namespace_start
	
	# TODO: ENCAPSULATESCOPE (adds tabs before every '\n')
	# TODO: if statements (if, else, endif, elif, keywords) these act like the C# precompiler

	#@TABIF() #TODO: Fix IsAt() StringBuilder Extension Function
	
	@FORMAT(filename)
	add '''
public class {}
{#n#t'''

	@FORMAT(filename)
	@IF(constructor)
	addln "#tpublic {}()#n{#n#t#n}#n"
	
	addln "}"

	namespace_end

//>

1
<#iniciere "Inherited CSharp Class"

	sdesc "CSharp class implementing another class"
	ldesc "Select the "

	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"

	@FileName 
	var filename
	@ClassType("Inherit From") 
	var baseType

	\=/

	@FORMAT(filename)
	file "{}.cs"

	# WIP
//>

AST for Above:
Template
|___Statements:
	|___@Name|sdesc , @StringLit, "CSharp class implementing another class "
	|___ ...
	
2
<#iniciere "Unity MonoBehaviour"

	sdesc "Unity MonoBehaviour Class"
	ldesc "Unity MonoBehaviour Class, most similar to default script creation"
	
	language "C##"
	category "stand"
	flags "std, oop"
	fileext "cs"
	
	@FileName 
	var filename
	
	@Toggle("Add Awake Method") 
	var mtdAwake
	@Toggle("Add Start Method") 
	var mtdStart
	@Toggle("Add Update Method") 
	var mtdUpdate
	@Toggle("Add FixedUpdate Method") 
	var mtdFixedUpdate
	
	\=/
	
	@FORMAT(filename)
	file "{}.cs"
	
	add '''
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;#n'''
	
	namespace_start
	
	@FORMAT(filename)
	addln '''
public class {} : MonoBehaviour
{
#t'''

@IF(mtdAwake)
addln "#n#tvoid Awake()#n#t{#n#t#t#n#t}"

@IF(mtdStart)
addln "#n#tvoid Start()#n#t{#n#t#t#n#t}"

@IF(mtdUpdate)
addln "#n#tvoid Update()#n#t{#n#t#t#n#t}"

@IF(mtdFixedUpdate)
addln "#n#tvoid FixedUpdate()#n#t{#n#t#t#n#t}"

addln "}"
	
	namespace_end
	
//>

3
<#iniciere "Unity ScriptableObject"

	sdesc "Unity ScriptableObject Class"
	ldesc "Unity ScriptableObject Class, used to create class assets"
	
	language "C##"
	category "standart"
	flags "std, oop"
	fileext "cs"
	
	@FileName 
	var filename
	
	@Toggle("Add OnEnable Method") 
	var mtdOnEnable
	@Toggle("Add OnDisable Method") 
	var mtdOnDisable
	
	@Toggle("Add CreateAssetMenu") 
	var createAssetMenu
	
	\=/
	
	@FORMAT(filename)
	file "{}.cs"
	
	add '''using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;#n#n'''
	
	namespace_start
	
	@IF(createAssetMenu)
	addln "[CreateAssetMenu]"
	
	@FORMAT(filename)
	addln '''public class {} : ScriptableObject
{
#t'''

	@IF(mtdOnEnable)
	addln "#tvoid OnEnable()#n#t{#n#t#t#n#t}#n"

	@IF(mtdOnDisable)
	addln "#tvoid OnDisable()#n#t{#n#t#t#n#t}#n"

	addln "}"
	
	namespace_end
//>
4
<#iniciere "Editor Class"

	sdesc "Unity Editor Class"
	ldesc "Unity Editor Class, used to create custom Editor GUIs for Unity Objects"
	
	language "C##"
	category "standart"
	flags "std, oop, editor"
	fileext "cs"

	@FileName
	var filename

	@Text("Target Class") # TODO: Optional Parameters
	var target
	
	@Toggle("Add OnInspectorGUI Method")
	var mtdGUI

\=/

	@FORMAT(filename)
	editor_file "{}Editor.cs"

	# TODO: Better this Formating
	add '''using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor;#n#n'''

	namespace_start

	@FORMAT(target)
	addln "[CustomEditor(typeof({}))]"

	@FORMAT(target)
	addln "public class {}Editor : Editor#n{"
	
	@FORMAT(target)
	addln "#t{} obj;"
	
	@FORMAT(target)
	add '''
	private void OnEnable()
	{
		obj = ({})target;
	}
	'''
	
	@IF(mtdGUI) # TODO: TabIf
	add '''
	public override void OnInspectorGUI()
	{
		base.OnInspectorGUI();
	}
'''
	
	addln "}"

	namespace_end

//>


TODO:
* Configuration System
	* Editor Folder

Final:
* Multiple Namespaces Option

* Config Editor

Polish:
* Disable Debug Stuff
* Extensive Testing

Editor Folder System:
* Show the Path
* Show a warning if it's an Editor Script'
* Use editor_file


Count:
Editors:
* Template Info Editor
* Template Header Editor
* Configuration

Windows:
* Precompilation Log
* Script Builder
* UseTemplate Window
* Create Script Window
+ Config Window

SOs:
* Template Info
* Template Header ??
+ Config Object

LANGUAGE IMPROVEMENTS:
* Add description for Properties
* True AST
* Flow Control (If, Else, Else If)
* Templates that take another File/Class as Input
* FileName-less Templates
* Compilation Cache (Somehow)

OLD
'''
TODO:
* ClassType Editor Window

* GlobalReflectionsCache on EditorRecompilation

Language:
* typeof expression (Utilizing using Statements)
* Value Assignment: set value of properties using '=' anytime
* Property Access (access C# Properties from Variables)
* Method Calls
* If, Else, ElIf, EndIf, system
* C# Function Calls (Expose through C# Attributes)

Templates:
* MonoBehaviour	|||
* ScriptableObject: Create Asset Alongside it
* EditorWindow Script
* EditorScript (Requires typeofExpression)

Decorators:
* ClassType(Type requiredParent = null)

Macro:
* Convert Tabs Macro


'''
